name: Auto Release from URLs (Safe Streaming)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for release (e.g. v1.0.0)'
        required: true
      release_name:
        description: 'Optional release name (defaults to tag name)'
        required: false

permissions:
  contents: write  # needed to create or update releases

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Ensure GitHub CLI is available
      - name: Check gh CLI
        run: gh --version

      # Step 3: Create or update the release
      - name: Create or update release
        run: |
          gh release view "${{ inputs.tag }}" >/dev/null 2>&1 || \
          gh release create "${{ inputs.tag }}" \
            --title "${{ inputs.release_name || inputs.tag }}" \
            --notes "Automated release for tag ${{ inputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Stream-style upload (one file at a time, minimal disk use)
      - name: Stream and upload files from urls.txt
        run: |
          mkdir -p tmp
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            echo "⬇️  Downloading from: $url"

            # Try to extract real filename from HTTP headers
            name=$(curl -sIL -o - "$url" | grep -i 'content-disposition:' | \
                    sed -n 's/.*filename=["'\'']\?\([^"'\'';]*\).*/\1/p' | tail -n1)
            if [ -z "$name" ]; then
              name=$(basename "${url%%\?*}")  # fallback if no header
            fi
            echo "→ Uploading as: $name"

            # Download & upload sequentially (limits disk use)
            curl -L "$url" -o "tmp/$name"
            gh release upload "${{ inputs.tag }}" "tmp/$name" --clobber
            rm -f "tmp/$name"
          done < urls.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
