name: Auto Release from URLs (aria2c Optimized)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for release (e.g. v1.0.0)'
        required: true
      release_name:
        description: 'Optional release name (defaults to tag name)'
        required: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install aria2
      - name: Install aria2
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2

      # Step 3: Check GitHub CLI
      - name: Check gh CLI
        run: gh --version

      # Step 4: Create or update the release
      - name: Create or update release
        run: |
          gh release view "${{ inputs.tag }}" >/dev/null 2>&1 || \
          gh release create "${{ inputs.tag }}" \
            --title "${{ inputs.release_name || inputs.tag }}" \
            --notes "Automated release for tag ${{ inputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Download & upload files using aria2c with retries
      - name: Download & upload files with aria2c
        run: |
          mkdir -p tmp
          while IFS= read -r url; do
            [ -z "$url" ] && continue

            echo "⬇️ Downloading from: $url"

            # Download with multi-threading, retry, and preserve filename from server headers
            aria2c -x16 -s16 -j1 -c \
              --retry-wait=5 --max-tries=10 \
              --remote-name --auto-file-renaming=false \
              -d tmp "$url"

            # Determine filename (aria2c saves as server-provided or URL basename)
            name=$(ls tmp | head -n1)

            echo "→ Uploading $name to GitHub Release"
            gh release upload "${{ inputs.tag }}" "tmp/$name" --clobber
            rm -f "tmp/$name"
            echo "✅ Uploaded $name successfully."
          done < urls.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
